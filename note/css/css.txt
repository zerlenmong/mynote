复习：
<form enctype="multipart/form-data" action="目标文档的URL" method="get|post">

</form>
get:?名值对username=king&email=123@qq	.com&....
post:HTTP headers
表单控件：
单行文本框：<input x-webkit-speech size="" maxlength="" placeholder="" type="text" name="" value="" />
密码框：<input type="password" name="pwd" />
单选框：<input checked="checked" type="radio" name="" value="提交值"/>
复选框：<input type="checkbox" name="名称[]" value=""/>
浏览框：<input type="file" name="" />
隐藏域：<input type="hidden" name="" value=""/>
下拉框：
<select name="" size="">
	<option selected="selected" value="提交值">xxxxxx</option>
	<optgroup label="分组名称">
		<option value="">xx</option>
	</optgroup>
</select>

<select name="数组形式" size="" mutiple="mutiple">


</select>
多行文本框：<textarea cols="" rows="" name="">内容</textarea>
按钮：

<input type="submit" name="" value=""/>

<input type="image" src="目标文档的URL"/>

<input type="reset" value="" />

<input type="button" name="" value="" />

框架集：

<!DOCTYPE Frameset>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>xxxx</title>
		<meta http-equiv="content-type" content="text/html;charset=utf-8"/>
	</head>
	<frameset rows="100,*" frameborder="no" border="">
		<frame src="目标文档URL" name="" scrolling="yes|no|auto" noresize="noresize"/>
		<frameset cols="200,*">
			<frame src="" name=""/>
			<frame src="" name=""/>
		</frameset>
	</frameset>
	<noframes>
		<body>xxxxx</body>
	</noframes>
</html>

嵌套网页：

<iframe scrolling="yes|no|auto" src="" width="" height="" frameborder="1|0"></iframe>

1.CSS[Cascading Style Sheet]:层叠样式表，美化网页

2.CSS的应用

1》链接到外部文档：链接到外部的CSS文档，.css结尾
<link />书写于<head></head>标记内，
<link href="目标文档的URL" type="text/css" rel="stylesheet" media="all|tv|print|screen"/>

2》书写于文档内部
<style type="text/css">

</style>,同样写在head标记中

3》书写于标记内部
<p style="color:red;font-size:100px;"> this sis a test</p>

3.CSS的语法结构

selector(选择器){
	样式
	声明---属性:属性值;
	属性:属性值;
	属性:属性值;
}

4.CSS的选择器：

1》通配选择器：*,自动适应所有标记
*{
	样式
}
2》id选择器：#ID名称

#ID名称{
	样式;
}
注意：
同一文档中ID名称只能出现一次

3》class类选择器:.类名称

.类名称{
	样式;
}

4》标记选择器：标记名称

标记名称{
	样式;
}

5》父类选择器：selector selector

selector selector {
	样式

}
注意：选择器之间至少为父子关系

6》子类选择器：selector>selector

selector>selector{
	样式;
}
注意：只能为父子关系

7》群组选择器：selector,selector,...

selector,selector,...{
	样式
}

8》兄弟选择器：selector+selector

selector+selector{
	样式

}
注意：兄弟选择器只对+后面的第一个兄弟有作用

9》伪类选择器

:link->是设置你链接默认的样式
:visited->是设置链接访问之后的样式
:hover->是设置鼠标悬浮在元素上方时的样式
:active->鼠标左键点击元素时的样式

注意：这4个伪类作用于超链接的时候，注意书写顺序
LVHA的顺序来写
:root
:not
:empty
:target
:focus:向具有输入域的元素添加样式

:first-child---向元素的第一个子元素添加样式
:last-child---向元素的最后一个子元素添加样式
:nth-child(n)---选择器用来定位某个父元素的一个或多个特定的子元素
:nth-last-child(n)---从某父元素的最后一个子元素开始计算，来选择特定的元素。
:first-of-type---其主要用来定位一个父元素下的某个类型的第一个子元素
:last-of-type--选择是父元素下的某个类型的最后一个子元素
:nth-of-type---选择器来定位于父元素中某种类型的子元素是非常方便和有用的,它只计算父元素中指定的某种类型的子元素
:nth-last-of-type(n)---选择父元素中指定的某种子元素类型，但它的起始方向是从最后一个子元素开始
:only-child---选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素
:only-of-type---选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素
:enabled选择器---有些表单元素有可用（“:enabled”）和不可用（“:disabled”）状态
:disabled选择器
:checked
::selection选择器--伪元素是用来匹配突出显示的文本(用鼠标选择文本时的文本Firefox 支持替代的 ::-moz-selection。)
:read-only选择器
:read-write选择器---主要用来指定当元素处于非只读状态时的样式。

10》伪元素:
::before和::after----::before和::after这两个主要用来给元素的前面或后面插入内容，
这两个常和"content"配合使用，使用的场景最多的就是清除浮动

:after->在元素内容之后添加样式
content:"添加内容"
content:url(目标文档的URL)

:before->在当前元素内容之前添加样式

.effect::before, .effect::after{
    content:"";
    position:absolute;
    z-index:-1;
    -webkit-box-shadow:0 0 20px rgba(0,0,0,0.8);
    -moz-box-shadow:0 0 20px rgba(0,0,0,0.8);
    box-shadow:0 0 20px rgba(0,0,0,0.8);
    top:50%;
    bottom:0;
    left:10px;
    right:10px;
    -moz-border-radius:100px / 10px;
    border-radius:100px / 10px;
}
上面代码作用在class名叫.effect上的div的前（before）后(after)都添加一个空元素，然后为这两个空元素添加阴影特效

5.选择器的优先级：

内联样式：1000,代表选择器的权值
id选择器:100
类选择器：10
标记选择器：1

优先级高的先执行，选择器求和

!important:优先级最高

6.div和span
div：是块元素，自己占一行
span:行内元素
配合CSS才会有效果

p,h1,h2,h3,h4,h5,h6,ul,ol,li,dl,dd,dt,
br,hr,form,table,tr,td,th,div,body

颜色：
color:颜色名称
color:rgb(数值,数值,数值)
数值0-255
color:rgb(百分数的形式,40%,30%)
color:十六进制数字的形式
#ABCDEF：天蓝色
#FF8800:橘黄色

盒子模型：

width:宽度
height：高度
padding:内边距，内容到边框之间的距离
padding-left:左内边距;
padding-top:上内边距;
padding-right:右内边距;
padding-bottom:下内边距;
padding:value;代表4个方向的值相同
padding:value1 value2;value1代表上和下，
value2代表左和右
padding:value1 value2 value3;
value1代表上 value2代表左和右 value3 下;
padding:value1上 value2右 value3下 value4左;

margin:代表外边距

margin-left:
margin-right:
margin-top:
margin-bottom:
margin:value;上下左右
margin:auto auto;

清楚浏览器给块级元素的外边距：

设置*{
	margin:0px;
	padding:0px;
}

变形---
-moz代表firefox浏览器私有属性
-ms代表IE浏览器私有属性
-webkit代表chrome、safari私有属性
deg 以角度(以符号“° 表示)表示角的大小
旋转---rotate()  -webkit-transform:rotate(n deg)
扭曲---skew( deg) 
1、skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；
2、skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；
3、skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形）;
缩放---scale(倍数)
1、 scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）;
2、scaleX(x)元素仅水平方向缩放（X轴缩放）;
3、scaleY(y)元素仅垂直方向缩放（Y轴缩放）
位移---translate(像素或者百分比)
1、translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）
2、translateX(x)仅水平方向移动（X轴移动）
3、translateY(Y)仅垂直方向移动（Y轴移动）
矩阵---matrix()--是一个含六个值的(a,b,c,d,e,f)变换矩阵




















CSS注释：

/*注释内容*/：注释内容中九不能再包括你*/









公共核心属性：

title:提示文本

id:代表唯一标识符

class:类名称

style:样式





伸缩布局
1.创建一个flex容器
.flexcontainer{ display: -webkit-flex; display: flex; }
2、flex项目显示--flex-direction
3、flex项目列显示
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; }
4、flex项目移动到顶部
flex项目称动到左边或右边也取决于主轴的方向。如果flex-direction设置为row，设置justify-content控制方向；如果设置为column，设置align-items控制方向。

垂直
.flexcontainer{ -webkit-flex-direction: column; flex-direction: column; -webkit-justify-content: flex-start; justify-content: flex-start; }
水平
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; -webkit-align-items: flex-start; align-items: flex-start; }


媒体类型

All           所有设备
Braille         盲人用点字法触觉回馈设备
Embossed      盲文打印机
Handheld    便携设备
Print      打印用纸或打印预览视图
Projection    各种投影设备
Screen 	电脑显示器
Speech	语音或音频合成器
Tv	电视机类型设备
Tty	使用固定密度字母栅格的媒介，比如电传打字机和终端

媒体类型的引用方法也有多种，常见的有：link标签、@import和CSS3新增的@media几种：
link    <link rel="stylesheet" tyle="text/css" href=""media="screen"/>

@import 
@import可以引用样式文件，同样也可以用来引用媒体类型。
@import引入媒体类型主要有两种方式，
一种是在样式中通过@import调用另一个样式文件；
如样式文件中调用另一个样式文件时，就可以指定对应的媒体类型。
@importurl(reset.css) screen;   
@importurl(print.css) print;
另一种方法是在<head></head>标签中的<style></style>中引入，但这种使用方法在IE6~7都不被支持，
在<head>中的<style>标签中引入媒体类型方法。
<head>
<style type="text/css">
    @importurl(style.css) all;
</style>
</head>


@media
（1）在样式文件中引用媒体类型：
@media screen {
   选择器{/*你的样式代码写在这里…*/}
}
 （2）使用@media引入媒体类型的方式是在<head>标签中的<style>中引用。
<head>
<style type="text/css">
    @media screen{
    选择器你的样式代码写在这里…*/}
}{/*
</style>
</head>


Media Queries的使用方法如下。
@media 媒体类型 and （媒体特性）{你的样式}
1. 最大宽度max-width
@media screen and (max-width:480px){
 .ads {
   display:none;
  }
}
2.最小宽度min-width
@media screen and (min-width:900px){
.wrapper{width: 980px;}
}
3.多个媒体特性使用

@media screen and (min-width:600px) and (max-width:900px){
  body {background-color:#f5f5f5;}
}

4.设备屏幕的输出宽度Device Width

在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。
同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。
<link rel="stylesheet" media="screen and (max-device-width:480px)" href="iphone.css" />

5. not关键词
使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：
@media not print and (max-width: 1200px){样式代码}
上面代码表示的是：样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。

6.only关键词

only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。
其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。
其主要有：支持媒体特性的设备，正常调用样式，
此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，
因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如
<linkrel="stylesheet" media="only screen and (max-device-width:240px)" href="android240.css" />

在Media Query中如果没有明确指定Media Type，那么其默认为all，如：
<linkrel="stylesheet" media="(min-width:701px) and (max-width:900px)" href="mediu.css" />

另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，
指定方式如下所示
<linkrel="stylesheet" type="text/css" href="style.css" media="handheld and (max-width:480px), screen and (min-width:960px)" />
上面代码中style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。


Responsive

“Responsive设计简单的称为RWD，是精心提供各种设备都能浏览网页的一种设计方法，
RWD能让你的网页在不同的设备中展现不同的设计风格。”
从这一点描述来说，RWD不是流体布局，也不是网格布局，而是一种独特的网页设计方法。


1.流体网格

流体网格是一个简单的网格系统，这种网格设计参考了流体设计中的网格系统，将每个网格格子使用百分比单位来控制网格大小。
这种网格系统最大的好处是让你的网格大小随时根据屏幕尺寸大小做出相对应的比例缩放。

2.弹性图片

弹性图片指的是不给图片设置固定尺寸，而是根据流体网格进行缩放，用于适应各种网格的尺寸。
而实现方法是比较简单，一句代码就能搞定的事情。
img {max-width:100%;}

断点提供不同的图片
<img src="image.jpg" data-src-600px="image-600px.jpg" data-src-800px="image-800px.jpg" alt="" />
对应的CSS代码：
@media (min-device-width:600px){
img[data-src-600px]{
  content: attr(data-src-600px,url);
  }
}
@media (min-device-width:800px){
  img[data-src-800px] {
  content:attr(data-src-800px,url);
  }
}

3.媒体查询
使用这个属性可以让你的设计根据用户终端设备适配对应的样式。

4.屏幕分辨率

5.主要断点
简单的描述就是，设备宽度的临界点。
设置断点应把握三个要点：满足主要的断点；有可能的话添加一些别的断点；设置高于1024的桌面断点

Responsive布局技巧

在Responsive布局中，可以毫无保留的丢弃：
第一， 尽量少用无关紧要的div；
第二，不要使用内联元素（inline）；
第三，尽量少用JS或flash；
第四，丢弃没用的绝对定位和浮动样式；
第五，摒弃任何冗余结构和不使用100%设置。

能帮助Responsive确定更好的布局呢？
第一，使用HTML5 Doctype和相关指南；
第二，重置好你的样式（reset.css）；
第三，一个简单的有语义的核心布局；
第四，给重要的网页元素使用简单的技巧，比如导航菜单之类元素。

Responsive设计——meta标签
<meta name=”viewport” content=”” />
在content属性中主要包括以下属性值，用来处理可视区域。
width  可视区域的宽度，其值可以是一个具体数字或关键词device-width
height   可视区域高度，其值可以是一个具体数字或关键词device-height
initial-scale  页面首次被显示时可视区域的缩放级别，取值为1.0时将页面按实际尺寸显示，无任何缩放 
minimun-scale 可视区域的最小缩放级别，表示用户可以将页面缩小的程度，取值为1.0时，将禁止用户缩小至实际尺寸以上
maximun-scale 可视区域的最大缩放级别，表示用户可以将页面放大的程序，取值为1.0时将禁止用户放大至实际尺寸以上
user-scalable 指定户是否可以对页面进行缩放，设置为yes将允许缩放，no为禁止缩放

可以通过这个可视区域的meta标签进行重置，告诉他使用设备的宽度为视图的宽度，
也就是说禁止其默认的自适应页面的效果，具体设置如下：
<meta name=”viewport” content=”width=device-width,initial-scale=1.0” />

另外一点，由于Responsive设计是结合CSS3的Media Queries属性，才能尽显Responsive设计风格，
但大家都清楚，在IE6-8中完全是不支持CSS3 Media。
下面我们一起来看看CSS3 Meida Queries在标准设备上的运用，
大家可以把这些样式加到你的样式文件中，或者单独创建一个名为“responsive.css”文件，
并在相应的条件中写上你的样式，让他适合你的设计需求。
脚本下载地址： 
media-queries.js(http://code.google.com/p/css3-mediaqueries-js/)      

 respond.js(https://github.com/scottjehl/Respond)

 <!—[if lt IE9]>
      <script src=http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js></script>
 ​<![endif]>



Responsive设计——不同设备的分辨率设置

1.1024px显屏
@media screen and (max-width : 1024px) {                    
/* 样式写在这里 */          
}     
2.800px显屏
@media screen and (max-width : 800px) {              
/* 样式写在这里 */          
}     
3.640px显屏
@media screen and (max-width : 640px) {              
/* 样式写在这*/            
}     
4.iPad横板显屏
@media screen and (max-device-width: 1024px) and (orientation: landscape) {              
/* 样式写在这 */            
}     
5.iPad竖板显屏
@media screen and (max-device-width: 768px) and (orientation: portrait) {         
/* 样式写在这 */            
}     
6.iPhone 和 Smartphones
@media screen and (min-device-width: 320px) and (min-device-width: 480px) {              
/* 样式写在这 */            
} 


自由缩放属性resize
resize: none | both | horizontal | vertical | inherit
textarea {
  -webkit-resize: horizontal;
  -moz-resize: horizontal;
  -o-resize: horizontal;
  -ms-resize: horizontal;
  resize: horizontal;
}
outline: ［outline-color］ || [outline-style] || [outline-width] || [outline-offset] || inherit

CSS生成内容
content配合CSS的伪类或者伪元素，一般可以做以下四件事情：

none	不生成任何内容
attr		插入标签属性值
url		使用指定的绝对或相对地址插入一个外部资源（图像，声频，视频或浏览器支持的其他任何资源）
string	插入字符串

在CSS中有一种清除浮动的方法叫“clearfix”。而这个“clearfix”方法就中就使用了“content”，
只不过只是在这里插入了一个空格。如下所示：
.clearfix:before,

.clearfix:after {

       content:””;

       display:table;

}

.clearfix:after {

       clear:both;

       overflow:hidden;

}











