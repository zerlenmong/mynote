oop:面向对象
   面向对象的思想 
   相同的属性及方法的一类事或物
   类的好处：
       代码组织管理清晰
       代码复用性强
       项目代码量就会减少
       开发进度快

    类如何封装

    class 类名{
    		属性：//属性和变量类似
    		方法：//方法和函数一样
    }
+------------------------------------------------------------------------------------+
|    可见性：                                                                        |
|         public:公共(可见性最高---通过对象可以访问，类内部可以使用，可以被继承)     |
|         protected:保护的(可见性一般---通过对象不可见，类内部可以使用，可以被继承)  |
|         private ：私有(可见性最低---只能在类内部使用)                              |
+------------------------------------------------------------------------------------+
    1--可见性
      +----？三种访问控制修饰符在四种情况下？-----+
      |         类里    类外   子类外     子类内  |
      |public    是      是      是         是    |
      |protected 是      否      否         是    |
      |private   是      否      否         否    |
      +-------------------------------------------+


    对象实例化
         new 类名;
         new 类名(参数);
    通过对象调用方法
    	$object->方法名(参数,.....)
    通过对象调用属性
    	$object->属性名(参数,......)
          --------------------------------
    	   |说明：调用属性没有$,只有属性名称|
         ---------------------------------
    类内部调用属性及方法 
     $this----类的当前对象
     类声明时没有产生 
     当写有$this里方法调用时


     封装类：定义：属性和方法的集合
             语法格式：
                class 类名{
                     可见性 属性
                     可见性 方法
                }
     封装方法
           类似函数

    思路(步骤):
       1、明确需求
       2、类应该有哪些方法
       3、封装方法(功能，参数，返回值)---需要注意，当一个方法产生的值，其它方法也要用时放入属性中
       4、属性定义

       构造函数（构造方法）
            1、一个对象必须调用一次。
            2、对象实例化完，立马调用。
            3、自动被调用（类实例化完，马上自动调用）
            4、在类实例化同时传参数
            5、无法接收构造函数的返回值。
            6、对对象的属性进行初始化。
            如何声明：
            public function __construct(参数,.....){

            }
            public function 类名同名(参数,.....){

            }

       皮箱类
          方法：打开 放东西 关闭 被购卖(构造方法)


    类的继承：
        一个类的声明在一个已经存在的类的基础上。
    语法格式：
       class 子类名称 extends 父类(已经存在的父类)名称{

       }
       特点：一个子类只能继承一个父类
       1、子类不会继承父类的私有属性或方法
       2、可见性为public 及 protected 的属性和方法可以被继承
       3、子类可以通过父类的公共方法访问父类的私有属性
       4、子类中定义的属性及方法和父类的属性及方法同名会覆盖//从父类继承的属性及方法可以被重写
       5、子类中属性的可见性高应该高于等于父类中属性的可见性//重写父类的属性及方法时，可见性只能越来越高
      作用：用来实现一些类中都要用的公共属性及方法



    数据模型类：所有和数据库表有关的类的父类

    魔术方法

      __construct()
         ----实例化：new---触发
      __isset()
        -----判断存在与否---触发
      __call($name,$proc)
        ----调用一个不可见(不存在或者不可见)的方法时---触发
          ---$name--存放名
          ---$proc--存放值


-----2014-06-19------
    final
     作用：控制一个类不被继承 --inherit


    析构方法(析构函数)--没有参数
      作用：对象被销毁之前调用一次
      实现：经常用于数据库链接关闭
      语法格式：
        function __destruct(){
              方法体
        }
       特点： 对象销毁调用

    静态的特点：属性及方法属于类，可以直接通过类名来调用，不用实例化对象
                静态属性和静态方法可以在普通方法中使用
                静态方法中不能使用非静态属性或方法 self::$属性名称
    静态属性

        可见性 static $属性名称=[初值]；

    静态方法

        可见性 static function 方法名称(参数...){
              方法体
        }
        如果一个类里包含了静态属性和静态方法就称为静态类。

    调用  类名::$属性
          类名::方法
          静态类可以被实例化(可以出现非静态属性和方法)

    类的自动加载

    function __autoload($className){
            require'路径'.$className."class.php";
    }
    这个函数自动被触发----1、当有new时，2、当调用一个静态属性或者静态方法时，3、当一个类继承另一个类时
      两点：    
          类名和类文件名有关系
          News--News.class.php
          类所放的目录有一定的规律
          设置默认加载目录
          get_include_path
          set_include_path

   魔术方法
   public function __call($name,$proc){

   }
   function __set($pName,$pValue){

   }---给一个不存在的属性赋值时，自动调用
     用法：1、屏蔽给对象新增属性
           2、把不存在的属性及值放到一个特定的属性中以数组的形式

   function __get($name){

   }---当访问一个不存在的属性时自动调用
   function __clone(){

   }---当一个对象被克隆时自动调用
   把可见性设置为private 后防止克隆

   函数：clone(变量名称)

   魔术常量：
__LINE__:得到当前的行号
__FILE__:得到当前脚本绝对路径
__FUNCTION__:得到当前函数名称
__CLASS__:得到当前的类名称
__METHOD__:得到当前方法的名称
__NAMESPACE__:命名空间的名称，PHP中新增的内容

---------2014-6-23--------
文件上传类
   move_upload_file(oldpath,newpath)
   copy(oldpath,newpath)
   两都之间的区别：move_upload_file拷贝后会删除临时文件
   copy不会删除临时文件
   array getimagesize ( string $filename [, array &$imageinfo ] )
   删除临时文件unlink($path);

文件上传类方法:
   指定保存目录
   指定允许的文件类型
   指定允许的文件大小
   产生文件名
   保存文件

水印类

----2014年6月25日----------
类常量---在类中定义

      const 常量名称=值;
          常量声明后，不能进行赋值
      访问类常量 self::常量名称
      class circle{//定义一个圆类
           private $r=0;
           const PI=3.14// 定义类常量圆周率
           function  __construct($r){
                $this->r=$r;
           }
           function getCircleArea(){
                return self::PI*pow($this->r,2);
           }
      }

抽象类---有些方法可以没有方法体
   声明：关键字 abstract
   abstract class people{
         function eat(){
          return true;
         }
        abstract function work($work);
   }
  特点：
     1、抽象类不能实例化对象，只能被继承
     2、抽象方法的可见性不能为private
     3、抽象方法在子类中必须重写;
     4、如果一个类中包含抽象方法，这个类一定是一个抽象类///??
     5、抽象类中可以没有抽象方法
  用途：
     控制一个类不能被实例化
     类中的方法体无法封装


接口
    作用：团队协作过程中可以通过接口，知道类的方法，参数，作用以及返回值
  关键字 interface 名称{
              只有抽象方法(不用加关键字abstract)
              //加注释
              function 名称(参数...);
  }
////////////////////////////////////////////////////////
      interface News{
        /*
          description:描述(作用)
          author:作者
          param:参数
          return:返回值
         */
         function 名称(参数...);
      }
  1、一定被继承 关键字 implements
  2、不能直接实例化对象
  3、只能有抽象方法
  4、抽象方法的可见性默认为public
  作用：
    1、团队协作，相互调用类时，直接查看接口
    2、接口中定义的方法对应的类中必须重写

单例模式(程序设计模式)
  定义：在程序运行过程中，只有一个对象存在。
     class test{
        private static $ob='';
        //在类的外部不能使用new实例化
        private function __construct(){

        }
        //防克隆
        private function __clone(){

        }

        public static function getInstance(){
           if(self::$ob==''){
              $ob=new test();
              self::$ob=$ob;
              return $ob;
           }else{
             return self::$ob;
           }
        }
     }
     总结:
     1、构造方法私有化
     2、生成一个静态方法来负责实例化对象(只能实例化一个)
     3、防克隆

pdo数据库操作类(占位符**，防sql注入)

1、pdo对应的相应链接文件库是否加载
2、对象产生，方法，属性
实例化对象：
$pdo=new PDO("mysql:host=ip address;dbname=数据库名称;",'用户名','用户名密码');
执行sql语句
query($sql)---用来执行查询语句====================== 使用方法，作用，返回值
         返回值 ：pdoStatement对象

pdoStatement对象
       方法：fetch()//每次获取一条记录---返回一维数组(混合数组)
             fetchAll()//一次获取所有记录--返回二维数组(混合数组)
       设置返回值的类型
         pdoStatement类的方法
             setFetchMode(PDO::FETCH_NUM|PDO::FETCH_ASSOC|PDO::FETCH_BOTH)
exec($sql)----用来执行update delete insert
         返回值：影响记录的条数
         获取主键ID值：$pdo->lastInsertId();   

prepare()
  $pdos=$pdo->prepare($sql);---返回pdoStatement对象可以运行任何的sql语句
      $pdos->execute()
      $pdos->setFetchMode();

      占位符:----防sql注入
         :名称
        说明:占位符只能对值起作用

sql注入：把sql中的传值改变，从而改变sql语句的功能  





























pdo数据库操作类(占位符，防sql注入)